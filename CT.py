"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —ç—Ä–≥–æ–Ω–æ–º–∏–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç 
–∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""

import asyncio
import keyboardInit as keyb
import analization
import unicodedata


async def main():
    textFile = "data/voina-i-mir.txt"
    csvFile = "data/sortchbukw.csv"
    digramsFile = "data/digramms.txt"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    text, digrams, csvText = await keyb.importFromFiles(textFile, digramsFile, csvFile)

    # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç (–∏–ª–∏ –±–∏–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # digrams = unicodedata.normalize("NFC", "".join(digrams))
    text = unicodedata.normalize("NFC", "".join(digrams))

    analyzer = analization.TextAnalyzer(debug_mode=False)
    await analyzer.keybsInits()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–æ–∫
    result = await analyzer.compareLayouts(text, analyzer.layouts)
    structured = analyzer.returnResults(result)

    # üîç –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    for layout in structured:
        print(f"\nüìã –†–∞—Å–∫–ª–∞–¥–∫–∞: {layout['layout_name']}")
        print(f"üîπ –û–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {layout['total_load']}")
        print(f"üîπ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π —Ä—É–∫: {layout['hand_switches']}")
        print(f"üîπ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: {layout['modifier_count']}")
        print("üîπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–ª—å—Ü–∞–º:")
        for finger, count in layout['finger_statistics'].items():
            print(f"   {finger or 'None'}: {count}")


if __name__ == '__main__':
    asyncio.run(main())
